worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# Load modules
load_module modules/ngx_http_lua_module.so;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    keepalive_timeout  65;

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Lua settings
    lua_package_path "/etc/nginx/lua/?.lua;;";
    lua_shared_dict tenant_domains 10m;

    # Include Let's Encrypt SSL automation
    init_by_lua_block {
        local ssl_automation = require "ssl_automation"
        ssl_automation.init()
    }

    # Default server for handling requests with unknown domains
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        location / {
            return 444;
        }

        # Let's Encrypt ACME challenge location
        location /.well-known/acme-challenge/ {
            content_by_lua_block {
                local ssl_automation = require "ssl_automation"
                ssl_automation.serve_challenge()
            }
        }
    }

    # Dynamic tenant server configuration
    server {
        listen 80;
        listen [::]:80;
        listen 443 ssl;
        listen [::]:443 ssl;

        ssl_certificate_by_lua_block {
            local ssl_automation = require "ssl_automation"
            ssl_automation.get_certificate()
        }

        # This is a placeholder - the actual server_name is determined by Lua
        server_name tenant.example.com;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_certificate_key /etc/nginx/ssl/default.key;

        # Domain verification and certificate handling
        set $tenant_id "";
        
        location / {
            rewrite_by_lua_block {
                local tenant_resolver = require "tenant_resolver"
                local tenant_id = tenant_resolver.resolve_tenant_by_domain(ngx.var.host)
                
                if tenant_id then
                    ngx.var.tenant_id = tenant_id
                else
                    ngx.status = 404
                    ngx.say("Tenant not found")
                    return ngx.exit(404)
                end
            }

            # Proxy to tenant service
            proxy_pass http://tenant-service:8080/tenants/$tenant_id;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Tenant-ID $tenant_id;
        }

        # HTTP to HTTPS redirect
        if ($scheme = http) {
            return 301 https://$host$request_uri;
        }
    }
}
